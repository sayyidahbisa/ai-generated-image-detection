# -*- coding: utf-8 -*-
"""Streamlit Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uen0wIsxkvapW37iMu9ot6R_aGu2Qfeq
"""
import streamlit as st
from PIL import Image
import tensorflow as tf
import numpy as np
import requests
from io import BytesIO

st.set_page_config(
    page_title="AI Generated Image",
    page_icon="üñºÔ∏è",
)

model = tf.keras.models.load_model("model.h5")

map_dict = {0: 'AI Generated Image',
            1: 'Human Made'}

def preprocess_image(image):
    """Preprocess the image to the format required by the model"""
    resized = image.resize((224, 224))  # Resize the image to the input shape expected by the model
    image_array = np.array(resized)  # Convert image to numpy array
    if image_array.ndim == 2:
        image_array = np.stack((image_array,) * 3, axis=-1)  # Convert grayscale to RGB if needed
    image_array = image_array / 255.0  # Normalize pixel values
    image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension
    return image_array

def main():
    st.markdown(
        """
        <style>
        .rounded-heading {
            text-align: center;
            background: linear-gradient(to right, #ff6f61, #e23e57);
            color: white;
            padding: 23px;
            border-radius: 7px;
            box-shadow: 0px 3px 4px rgba(0, 0, 0, 0.2);
        }

        .rounded-heading:hover {
            background: linear-gradient(to left, #ff6f61, #e23e57);
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        "<h1 class='rounded-heading'>AI Generated Detection</h1>", 
        unsafe_allow_html=True)

    st.markdown(
        "<h3 style='text-align: center; color: #ff6f61; text-shadow: 0px 2px 5px rgba(0, 0, 0, 0.07);'>üé® AI Image Generated Detection</h3><br>", 
        unsafe_allow_html=True)

    upload_tab, url_tab = st.tabs(["Upload", "Image URL"])
    img = None

    with upload_tab:
        img_file = st.file_uploader("Upload an image", key="file_uploader", type=["jpg", "jpeg", "png"])
        if img_file is not None:
            img = Image.open(img_file).convert("RGB")
            st.image(img, caption='Uploaded Image.', use_column_width=True)

    with url_tab:
        url = st.text_input("Image URL", key="image_url")
        if url != "":
            try:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content)).convert("RGB")
                st.image(img, caption='Image from URL.', use_column_width=True)
            except:
                st.error("The URL is not valid.")

    if img is not None:
        img_array = preprocess_image(img)
        Generate_pred = st.button("Generate Prediction")
        if Generate_pred:
            try:
                prediction = model.predict(img_array).argmax()
                st.title("Predicted Label for the image is {}".format(map_dict[prediction]))
            except Exception as e:
                st.error(f"An error occurred during prediction: {e}")
                
if __name__ == '__main__':
    main()
